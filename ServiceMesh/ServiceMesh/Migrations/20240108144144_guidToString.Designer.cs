// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ServiceMesh.RepositoryContext;

#nullable disable

namespace ServiceMesh.Migrations
{
    [DbContext(typeof(ServiceMeshDbContext))]
    [Migration("20240108144144_guidToString")]
    partial class guidToString
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ServiceMesh.Entities.ServiceAdapterEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProtocolDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProtocolUsed")
                        .HasColumnType("int");

                    b.Property<string>("ServiceInfoEntityId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ServiceInfoEntityId");

                    b.ToTable("ServiceAdapters", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "90abbca8-664d-4b20-b5de-024705497d4a",
                            Address = "127.0.0.1",
                            ProtocolDescription = "/api",
                            ProtocolUsed = 1,
                            ServiceInfoEntityId = "80abbca8-664d-4b20-b5de-024705497d4a"
                        },
                        new
                        {
                            Id = "91abbca8-664d-4b20-b5de-024705497d4a",
                            Address = "localhost:50051",
                            ProtocolDescription = "com.example.Greeter/SayHello",
                            ProtocolUsed = 3,
                            ServiceInfoEntityId = "80abbca8-664d-4b20-b5de-024705497d4a"
                        },
                        new
                        {
                            Id = "92abbca8-664d-4b20-b5de-024705497d4a",
                            Address = "127.0.0.2",
                            ProtocolDescription = "/api",
                            ProtocolUsed = 3,
                            ServiceInfoEntityId = "80abbca8-664d-4b20-b5de-024705497d5b"
                        },
                        new
                        {
                            Id = "93abbca8-664d-4b20-b5de-024705497d4a",
                            Address = "localhost:50053",
                            ProtocolDescription = "com.example.Greeter/SayHello",
                            ProtocolUsed = 2,
                            ServiceInfoEntityId = "80abbca8-664d-4b20-b5de-024705497d5b"
                        });
                });

            modelBuilder.Entity("ServiceMesh.Entities.ServiceInfoEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ServiceType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ServiceInfos", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "80abbca8-664d-4b20-b5de-024705497d4a",
                            ServiceType = "LoggerService",
                            Timestamp = new DateTime(2024, 1, 8, 16, 41, 43, 984, DateTimeKind.Local).AddTicks(4348)
                        },
                        new
                        {
                            Id = "80abbca8-664d-4b20-b5de-024705497d5b",
                            ServiceType = "AuthenticationService",
                            Timestamp = new DateTime(2024, 1, 8, 16, 41, 43, 984, DateTimeKind.Local).AddTicks(4412)
                        });
                });

            modelBuilder.Entity("ServiceMesh.Entities.ServiceAdapterEntity", b =>
                {
                    b.HasOne("ServiceMesh.Entities.ServiceInfoEntity", "ServiceInfoEntity")
                        .WithMany("Adapters")
                        .HasForeignKey("ServiceInfoEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceInfoEntity");
                });

            modelBuilder.Entity("ServiceMesh.Entities.ServiceInfoEntity", b =>
                {
                    b.Navigation("Adapters");
                });
#pragma warning restore 612, 618
        }
    }
}
